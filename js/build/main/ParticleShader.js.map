{"version":3,"sources":["../../react/main/ParticleShader.tsx"],"names":["compileShader","gl","type","source","shader","createShader","shaderSource","Shader","canvas","document","getElementById","console","log","getContext","antialias","alpha","depth","stencil","depthMask","disable","DEPTH_TEST","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","program","createProgram","attachShader","VERTEX_SHADER","Vert","FRAGMENT_SHADER","Fragment","linkProgram","useProgram","resLoc","getUniformLocation","uniform2f","width","height","viewport","coordBuffer","createBuffer","coordLoc","getAttribLocation","enableVertexAttribArray","bindBuffer","ARRAY_BUFFER","bufferData","points","DYNAMIC_DRAW","vertexAttribPointer","FLOAT","drawArrays","POINTS","length"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA,SAASA,aAAT,CAAuBC,EAAvB,EAA2BC,IAA3B,EAAiCC,MAAjC,EAAyC;AACvC,MAAIC,MAAM,GAAGH,EAAE,CAACI,YAAH,CAAgBH,IAAhB,CAAb;AACAD,EAAAA,EAAE,CAACK,YAAH,CAAgBF,MAAhB,EAAwBD,MAAxB;AACAF,EAAAA,EAAE,CAACD,aAAH,CAAiBI,MAAjB;AACA,SAAOA,MAAP;AACD;;AAEc,SAASG,MAAT,GAAkB;AAC/B,MAAMC,MAAM,GAAGC,QAAQ,CAACC,cAAT,CACb,QADa,CAAf;AAIAC,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;;AAEA,MAAIJ,MAAJ,EAAY;AACV,QAAMP,EAAE,GAAGO,MAAM,CAACK,UAAP,CAAkB,OAAlB,EAA2B;AACpCC,MAAAA,SAAS,EAAE,KADyB;AAEpCC,MAAAA,KAAK,EAAE,IAF6B;AAGpCC,MAAAA,KAAK,EAAE,KAH6B;AAIpCC,MAAAA,OAAO,EAAE;AAJ2B,KAA3B,CAAX;AAMAhB,IAAAA,EAAE,CAACiB,SAAH,CAAa,KAAb;AACAjB,IAAAA,EAAE,CAACkB,OAAH,CAAWlB,EAAE,CAACmB,UAAd;AACAnB,IAAAA,EAAE,CAACoB,SAAH,CAAapB,EAAE,CAACqB,SAAhB,EAA2BrB,EAAE,CAACsB,mBAA9B;AAEA,QAAMC,OAAO,GAAGvB,EAAE,CAACwB,aAAH,EAAhB;AAEAxB,IAAAA,EAAE,CAACyB,YAAH,CACEF,OADF,EAEExB,aAAa,CAACC,EAAD,EAAKA,EAAE,CAAC0B,aAAR,EAAuBC,sBAAvB,CAFf;AAIA3B,IAAAA,EAAE,CAACyB,YAAH,CACEF,OADF,EAEExB,aAAa,CAACC,EAAD,EAAKA,EAAE,CAAC4B,eAAR,EAAyBC,qBAAzB,CAFf;AAKA7B,IAAAA,EAAE,CAAC8B,WAAH,CAAeP,OAAf;AACAvB,IAAAA,EAAE,CAAC+B,UAAH,CAAcR,OAAd;AAEAb,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAzBU,CA2BV;;AACA,QAAIqB,MAAM,GAAGhC,EAAE,CAACiC,kBAAH,CAAsBV,OAAtB,EAA+B,KAA/B,CAAb;AACAvB,IAAAA,EAAE,CAACkC,SAAH,CAAaF,MAAb,EAAqBzB,MAAM,CAAC4B,KAA5B,EAAmC5B,MAAM,CAAC6B,MAA1C,EA7BU,CA+BV;;AACApC,IAAAA,EAAE,CAACqC,QAAH,CAAY,CAAZ,EAAe,CAAf,EAAkB9B,MAAM,CAAC4B,KAAzB,EAAgC5B,MAAM,CAAC6B,MAAvC,EAhCU,CAkCV;;AACA,QAAIE,WAAW,GAAGtC,EAAE,CAACuC,YAAH,EAAlB;AACA,QAAIC,QAAQ,GAAGxC,EAAE,CAACyC,iBAAH,CAAqBlB,OAArB,EAA8B,WAA9B,CAAf;AACAvB,IAAAA,EAAE,CAAC0C,uBAAH,CAA2BF,QAA3B;AACAxC,IAAAA,EAAE,CAAC2C,UAAH,CAAc3C,EAAE,CAAC4C,YAAjB,EAA+BN,WAA/B;AACAtC,IAAAA,EAAE,CAAC6C,UAAH,CAAc7C,EAAE,CAAC4C,YAAjB,EAA+BE,gBAA/B,EAAuC9C,EAAE,CAAC+C,YAA1C;AACA/C,IAAAA,EAAE,CAACgD,mBAAH,CAAuBR,QAAvB,EAAiC,CAAjC,EAAoCxC,EAAE,CAACiD,KAAvC,EAA8C,KAA9C,EAAqD,CAArD,EAAwD,CAAxD;AACAjD,IAAAA,EAAE,CAACkD,UAAH,CAAclD,EAAE,CAACmD,MAAjB,EAAyB,CAAzB,EAA4BL,iBAAOM,MAAP,GAAgB,CAA5C;AACD;AACF","sourcesContent":["import Fragment from \"../../shaders/Particles.frag\";\nimport Vert from \"../../shaders/Particles.vert\";\nimport points from \"./Test\";\n\nfunction compileShader(gl, type, source) {\n  let shader = gl.createShader(type);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n  return shader;\n}\n\nexport default function Shader() {\n  const canvas = document.getElementById(\n    \"canvas\"\n  ) as HTMLCanvasElement;\n\n  console.log(\"canvas test\");\n\n  if (canvas) {\n    const gl = canvas.getContext(\"webgl\", {\n      antialias: false,\n      alpha: true,\n      depth: false,\n      stencil: false,\n    });\n    gl.depthMask(false);\n    gl.disable(gl.DEPTH_TEST);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n    const program = gl.createProgram();\n\n    gl.attachShader(\n      program,\n      compileShader(gl, gl.VERTEX_SHADER, Vert)\n    );\n    gl.attachShader(\n      program,\n      compileShader(gl, gl.FRAGMENT_SHADER, Fragment)\n    );\n\n    gl.linkProgram(program);\n    gl.useProgram(program);\n\n    console.log(\"found progmra\");\n\n    // set resolution\n    let resLoc = gl.getUniformLocation(program, \"res\");\n    gl.uniform2f(resLoc, canvas.width, canvas.height);\n\n    // set viewport\n    gl.viewport(0, 0, canvas.width, canvas.height);\n\n    // set point positions\n    let coordBuffer = gl.createBuffer();\n    let coordLoc = gl.getAttribLocation(program, \"aPosition\");\n    gl.enableVertexAttribArray(coordLoc);\n    gl.bindBuffer(gl.ARRAY_BUFFER, coordBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, points, gl.DYNAMIC_DRAW);\n    gl.vertexAttribPointer(coordLoc, 2, gl.FLOAT, false, 4, 0);\n    gl.drawArrays(gl.POINTS, 0, points.length / 4);\n  }\n}\n"],"file":"ParticleShader.js"}